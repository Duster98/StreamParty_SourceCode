<Application x:Class="FilmParty.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:FilmParty"
             xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
             StartupUri="MainWindow.xaml">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Indigo.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />
            </ResourceDictionary.MergedDictionaries>


            <wpf:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" />
            <wpf:MathConverter Operation="Divide" x:Key="DivisionMathConverter" />
            <wpf:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <wpf:TextFieldClearButtonVisibilityConverter x:Key="ClearTextConverter" />
            <wpf:NotConverter x:Key="NotConverter" />

            <Style x:Key="MaterialDesignNewTextBoxBase" TargetType="{x:Type TextBoxBase}">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="1 0 1 0" />
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="CaretBrush" Value="White" />
                <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
                <Setter Property="wpf:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding RelativeSource={RelativeSource Self}, Path=(SpellCheck.IsEnabled)}" />
                <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="White" />
                <Setter Property="wpf:HintAssist.Foreground" Value="White" />
                <!-- cludge the default context menu -->
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Command="Cut">
                                <MenuItem.Icon>
                                    <wpf:PackIcon Kind="ContentCut"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="Copy">
                                <MenuItem.Icon>
                                    <wpf:PackIcon Kind="ContentCopy" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="Paste">
                                <MenuItem.Icon>
                                    <wpf:PackIcon Kind="ContentPaste"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBoxBase}">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Focused">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" From="0" To="1" Duration="0:0:0.3">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseOut" />
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" From="0" To="1" Duration="0:0:0.3">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseOut" />
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0" BeginTime="0:0:0.45" Duration="0" />
                                                <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="0" BeginTime="0:0:0.45" Duration="0" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unfocused">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0" Duration="0" />
                                                <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="0" Duration="0" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                                CornerRadius="{Binding Path=(wpf:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="{Binding Path=(wpf:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                RenderTransformOrigin="0.5,0.5">
                                    <Border.RenderTransform>
                                        <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                                    </Border.RenderTransform>
                                </Border>
                                <Border x:Name="textFieldBoxBorder" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding Path=(wpf:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                                    <Grid>
                                        <Border x:Name="border"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True"
                                        Padding="0 2 0 4">
                                            <Grid x:Name="textFieldGrid"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          MinWidth="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                      />
                                                <wpf:SmartHint x:Name="Hint"
                                                       Grid.Column="0"
                                                       HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static wpf:HintProxyFabricConverter.Instance}}"
                                                       FontSize="{TemplateBinding FontSize}"
                                                       Padding="{TemplateBinding Padding}"
                                                       HintOpacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                                       UseFloating="{Binding Path=(wpf:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                                       FloatingScale="{Binding Path=(wpf:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                                       FloatingOffset="{Binding Path=(wpf:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}">
                                                    <wpf:SmartHint.Hint>
                                                        <Border x:Name="HintBackgroundBorder" Background="Transparent" CornerRadius="2">
                                                            <ContentPresenter 
                                                        x:Name="HintWrapper" 
                                                        Content="{Binding Path=(wpf:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                        </Border>
                                                    </wpf:SmartHint.Hint>
                                                </wpf:SmartHint>
                                                <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Top" >
                                                    <TextBlock VerticalAlignment="Bottom"
                                                   FontSize="{TemplateBinding FontSize}"
                                                   Opacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                                   Text="{Binding Path=(wpf:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}"
                                                   />
                                                    <Button x:Name="PART_ClearButton" Height="Auto" Padding="2,0,0,0"
                                                Style="{DynamicResource MaterialDesignToolButton}">
                                                        <Button.Visibility>
                                                            <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                                                <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}"/>
                                                                <Binding Path="(wpf:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                            </MultiBinding>
                                                        </Button.Visibility>
                                                        <wpf:PackIcon Margin="0" Kind="CloseCircle" />
                                                    </Button>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                        <Border x:Name="textFieldBoxBottomLine"
                                        Background="{TemplateBinding BorderBrush}"
                                        Height="0"
                                        CornerRadius="{Binding Path=(wpf:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Bottom"
                                        SnapsToDevicePixels="True" />
                                        <Path x:Name="DashedLine"
                                      VerticalAlignment="Bottom"
                                      Visibility="Collapsed"
                                      Stretch="Fill"
                                      Data="M 0,0 L 1,0"
                                      StrokeThickness="{Binding BorderThickness.Bottom, ElementName=border, Converter={StaticResource DivisionMathConverter}, ConverterParameter=0.75}"
                                      StrokeDashArray="1,2.5"
                                      StrokeDashCap="Round"
                                      Stroke="{TemplateBinding BorderBrush}"
                                      Opacity="0.56" />
                                        <wpf:Underline x:Name="Underline" Visibility="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                                               CornerRadius="{Binding Path=(wpf:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                               Background="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Canvas VerticalAlignment="Bottom">
                                            <TextBlock Canvas.Top="2" FontSize="10" MaxWidth="{Binding ActualWidth, ElementName=border}"
                                           Opacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                           Text="{Binding Path=(wpf:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Canvas>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                                </MultiTrigger>
                                <Trigger Property="wpf:HintAssist.IsFloating" Value="True">
                                    <Setter TargetName="border" Property="Margin" Value="0 18 0 0" />
                                </Trigger>
                                <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                                    <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"/>
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                                    <Setter TargetName="textFieldGrid" Property="Margin" Value="12,0,12,0" />
                                    <Setter TargetName="border" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="border" Property="Cursor" Value="IBeam" />
                                    <Setter TargetName="Hint" Property="Margin" Value="0,0,0,16" />
                                    <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,8,0,8" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                                        <Condition Property="wpf:HintAssist.IsFloating" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,0,0,8" />
                                    <Setter TargetName="Hint" Property="Margin" Value="0,0,0,0" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="AcceptsReturn" Value="true" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                </MultiTrigger>
                                <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="1" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-1" />
                                    <Setter TargetName="textFieldGrid" Property="Margin" Value="12,0,12,0" />
                                    <Setter TargetName="border" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="border" Property="Cursor" Value="IBeam" />
                                    <Setter TargetName="border" Property="Margin" Value="0 0 0 0" />
                                    <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,0,0,8" />
                                    <Setter TargetName="Hint" Property="Margin" Value="0,0,0,0" />
                                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                                    <Setter TargetName="Hint" Property="FloatingOffset" Value="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="HintWrapper" Property="Opacity" Value="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4, 0" />
                                    <Setter TargetName="HintBackgroundBorder" Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                        <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="AcceptsReturn" Value="true" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Opacity" Value="0.42" />
                                    <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="false" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="false" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="border" Value="0.42"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="false" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="DashedLine" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="2" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                        <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,2" />
                                    <Setter TargetName="border" Property="Padding" Value="0,4,0,3" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                                    <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="1" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                                </MultiTrigger>
                                <Trigger Property="Validation.HasError" Value="true">
                                    <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                                    <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Validation.HasError" Value="True" />
                                        <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                                    <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                            <Condition Property="IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="MaterialDesignNewTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignNewTextBoxBase}" />

            <Style x:Key="MaterialDesignNewFloatingHintTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignNewTextBox}">
                <Setter Property="wpf:HintAssist.IsFloating" Value="True"/>
            </Style>

            <Style x:Key="MaterialDesignNewFilledTextFieldTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignNewFloatingHintTextBox}">
                <Setter Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                <Setter Property="wpf:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
                <Setter Property="wpf:TextFieldAssist.TextFieldCornerRadius" Value="4,4,0,0" />
                <Setter Property="wpf:TextFieldAssist.UnderlineCornerRadius" Value="0" />
            </Style>

            <Style x:Key="MaterialDesignNewOutlinedTextFieldTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignNewFloatingHintTextBox}">
                <Setter Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                <Setter Property="wpf:TextFieldAssist.TextFieldCornerRadius" Value="4" />
            </Style>


            <Style x:Key="MessageAllert" TargetType="{x:Type ButtonBase}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <!--<Setter Property="Cursor" Value="Hand"/>-->
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <!--<Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />-->
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Grid>
                                <Border Background="{TemplateBinding Background}" x:Name="border" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <Border.Resources>
                                        <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{DynamicResource PrimaryHueMidBrushColor}" Opacity="0.16"/>
                                    </Border.Resources>
                                    <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                        <wpf:Ripple.Clip>
                                            <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                                <Binding ElementName="border" Path="ActualWidth" />
                                                <Binding ElementName="border" Path="ActualHeight" />
                                                <Binding ElementName="border" Path="CornerRadius" />
                                                <Binding ElementName="border" Path="BorderThickness" />
                                            </MultiBinding>
                                        </wpf:Ripple.Clip>
                                    </wpf:Ripple>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Button.IsDefaulted" Value="true">
                                    <!--Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"-->
                                </Trigger>
                                <!--<Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryHueMidBrush}" />
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryHueMidBrush}" />
                                </Trigger>-->
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.23"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="MyButton" TargetType="{x:Type ButtonBase}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <!--<Setter Property="Cursor" Value="Hand"/>-->
                <!--<Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />-->
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Grid>
                                <Border Background="{TemplateBinding Background}" x:Name="border" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <Border.Resources>
                                        <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{DynamicResource PrimaryHueMidBrushColor}" Opacity="0.16"/>
                                    </Border.Resources>
                                    <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                        <wpf:Ripple.Clip>
                                            <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                                <Binding ElementName="border" Path="ActualWidth" />
                                                <Binding ElementName="border" Path="ActualHeight" />
                                                <Binding ElementName="border" Path="CornerRadius" />
                                                <Binding ElementName="border" Path="BorderThickness" />
                                            </MultiBinding>
                                        </wpf:Ripple.Clip>
                                    </wpf:Ripple>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.23"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border x:Name="rectangle"
                                SnapsToDevicePixels="True"
                                Background="#4f555c"
                                CornerRadius="2.5"
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
                <Setter Property="Width" Value="8"/>
                <Setter Property="Margin" Value="-8 0 0 0" />
                <Setter Property="MinWidth" Value="{Binding Width, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">

                                <Border Padding="0 4">
                                    <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Width="5" HorizontalAlignment="Center">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageUpCommand}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageDownCommand}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumb}" />
                                        </Track.Thumb>
                                    </Track>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="MinWidth" Value="0"/>
                        <Setter Property="Height" Value="8"/>
                        <Setter Property="MinHeight" Value="{Binding Height, RelativeSource={RelativeSource Self}}"/>
                        <Setter Property="Margin" Value="0 -8 0 0" />

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                        <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Height="5">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                            </Track.DecreaseRepeatButton>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageRightCommand}"/>
                                            </Track.IncreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{StaticResource ScrollBarThumb}" />
                                            </Track.Thumb>
                                        </Track>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>

                                <ScrollBar x:Name="PART_VerticalScrollBar" 
                                   Opacity="0"
                                   AutomationProperties.AutomationId="VerticalScrollBar" 
                                   Cursor="Arrow" 
                                   Grid.Column="1"
                                   Maximum="{TemplateBinding ScrollableHeight}" 
                                   Minimum="0" 
                                   Grid.Row="0" 
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"/>

                                <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Opacity="0"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Cursor="Arrow" 
                                   Grid.Column="0"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0" 
                                   Orientation="Horizontal"
                                   Grid.Row="1" 
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                   ViewportSize="{TemplateBinding ViewportWidth}"/>

                            </Grid>

                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" />
                                            <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" />
                                            <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



            <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="{StaticResource Primary200}"/>
            <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="{StaticResource Primary200Foreground}"/>
            <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{StaticResource Primary500}"/>
            <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="{StaticResource Primary500Foreground}"/>
            <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{StaticResource Primary700}"/>
            <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="{StaticResource Primary700Foreground}"/>
            <SolidColorBrush x:Key="SecondaryColorMessage" Color="#64baf4"/>
        </ResourceDictionary>
    </Application.Resources>

</Application>
